%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 20 118 575 673
%%Creator: FreeHEP Graphics2D Driver
%%Producer: com.maplesoft.mathdoc.view.plot.paint.PlotPSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: Monday, January 27, 2014 8:30:30 AM EST
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Draw a line. (x0 y0 x1 y1 line)
/L {bias n m l S unbias} def

% Polyline primitive.
/polyline  {n m 1 exch 1 exch
           {pop currentfile token pop currentfile token pop l} for
           } def

% Draw a polyline (n x0 y0 OPL x1 y1 x2 y2 ... ... xn yn)
/OPL {bias polyline S unbias} def

% Draw a closed polyline (n x0 y0 CPL x1 y1 x2 y2 ... ... xn yn)
/CPL {bias polyline s unbias} def

% Draw a filled polyline (n x0 y0 FPL x1 y1 x2 y2 ... ... xn yn)
/FPL {polyline h f*} def

% Draw an oval. (x y w h OVL)
/OVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width currentlinewidth sub 2 div
      height currentlinewidth sub 2 div neg
      scale n 0 0 1 5 -2 roll arc
      smatrix setmatrix S} def

% Draw a filled oval. (x y w h FOVL)
/FOVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width 2 div
      height 2 div neg
      scale n 0 0 m 0 0 1 5 -2 roll arc
      h smatrix setmatrix f} def

% Draw a rounded rectangle. (x y w h arcwidth archeight RREC)
/RREC {matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      s} def

% Draw a filled rounded rectangle. (x y w h arcwidth archeight FRREC)
/FRREC{matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      h f} def

% Draw a string.  (string x y STR)
/STR {q m 1 -1 scale recshow Q} def

% Define basic plot symbols.
/xys   {/siz exch def /yv exch def /xv exch def} def
/hline {xys n xv siz 2. div sub yv m siz 0 rlineto S} def
/vline {xys n xv yv siz 2. div sub m 0 siz rlineto S} def
/plus  {xys n xv yv siz 2. div sub m 0 siz rlineto
                    xv siz 2. div sub yv m siz 0 rlineto S} def
/dot   {n 2. div 0 360 arc s} def
/fdot  {n 2. div 0 360 arc h f} def
/box   {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                    siz 2 sqrt div dup rs} def
/fbox  {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                       siz 2 sqrt div dup rf} def
/tridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto s} def
/ftridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto h f} def

% Symbols defined in terms of the others.
/star     {3 copy cross plus} def
/cross    {xys q xv yv translate 45 rotate 0 0 siz plus Q} def
/diamond  {xys q xv yv translate 45 rotate 0 0 siz box Q} def
/fdiamond {xys q xv yv translate 45 rotate 0 0 siz fbox Q} def
/triup    {xys q xv yv translate 180 rotate 0 0 siz tridn Q} def
/ftriup   {xys q xv yv translate 180 rotate 0 0 siz ftridn Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Helvetica 16#00 vg&newcompositefont
/DialogInput-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
595 791 setpagesize
20 20 20 20 setmargins
0 0 setorigin
400 400 setsize
fittopage
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0 0 0 RG
[ 1.00000 0 0 1.00000 0 0 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0 0 m
400.000 0 l
400.000 400.000 l
0 400.000 l
0 0 l
h
f
0 0 0 RG
1.50000 w
0 J
1 j
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 0 390 390 rc
1.00000 w
2 J
0 j
0 J
1 j
q
Q
2 J
0 j
0 J
1 j
q
Q
2 J
0 j
1.50000 w
0 J
1 j
q
q
54.0000 -1.00000 329.989 355.000 rc
newpath
55.0000 353.000 m
56.7191 351.580 l
58.2150 350.342 l
59.8972 348.946 l
61.5906 347.538 l
63.2760 346.132 l
64.8385 344.825 l
66.4564 343.469 l
68.1296 342.063 l
69.7975 340.657 l
71.5131 339.208 l
73.0242 337.928 l
74.7254 336.483 l
76.4336 335.029 l
78.0797 333.623 l
79.5745 332.344 l
81.3520 330.819 l
82.8578 329.524 l
84.6093 328.013 l
86.1598 326.673 l
87.8608 325.198 l
89.4807 323.790 l
91.1708 322.318 l
92.7228 320.962 l
94.3969 319.496 l
96.1359 317.969 l
97.6496 316.636 l
99.2845 315.194 l
100.973 313.699 l
102.625 312.233 l
104.224 310.812 l
105.999 309.229 l
107.594 307.803 l
109.297 306.276 l
110.840 304.889 l
112.528 303.369 l
114.115 301.935 l
115.774 300.433 l
117.397 298.960 l
119.095 297.414 l
120.731 295.921 l
122.404 294.391 l
124.063 292.869 l
125.587 291.467 l
127.334 289.856 l
128.897 288.411 l
130.563 286.867 l
132.158 285.386 l
133.928 283.736 l
135.462 282.304 l
137.202 280.674 l
138.788 279.185 l
140.523 277.552 l
142.020 276.140 l
143.725 274.527 l
145.372 272.965 l
147.017 271.400 l
148.657 269.837 l
150.232 268.331 l
151.935 266.700 l
153.558 265.140 l
155.266 263.495 l
156.813 262.002 l
158.521 260.347 l
160.158 258.759 l
161.791 257.170 l
163.496 255.505 l
165.067 253.969 l
166.676 252.391 l
168.452 250.645 l
170.060 249.059 l
171.705 247.434 l
173.378 245.776 l
174.915 244.249 l
176.554 242.617 l
178.181 240.993 l
179.920 239.251 l
181.456 237.710 l
183.227 235.928 l
184.826 234.315 l
186.407 232.715 l
188.108 230.990 l
189.816 229.254 l
191.369 227.670 l
193.019 225.984 l
194.630 224.334 l
196.375 222.541 l
197.885 220.986 l
199.620 219.195 l
201.251 217.507 l
202.866 215.831 l
204.482 214.149 l
206.131 212.430 l
207.878 210.603 l
209.480 208.923 l
211.062 207.260 l
212.752 205.478 l
214.439 203.696 l
215.953 202.092 l
217.747 200.187 l
219.248 198.589 l
221.003 196.715 l
222.678 194.921 l
224.174 193.316 l
225.856 191.507 l
227.550 189.680 l
229.235 187.857 l
230.798 186.163 l
232.416 184.405 l
234.089 182.581 l
235.757 180.759 l
237.472 178.880 l
238.983 177.220 l
240.685 175.347 l
242.393 173.462 l
244.039 171.640 l
245.534 169.981 l
247.311 168.004 l
248.817 166.324 l
250.568 164.366 l
252.119 162.628 l
253.820 160.716 l
255.440 158.891 l
257.130 156.982 l
258.682 155.224 l
260.356 153.323 l
262.095 151.343 l
263.609 149.616 l
265.244 147.745 l
266.933 145.807 l
268.585 143.907 l
270.184 142.063 l
271.959 140.011 l
273.554 138.162 l
275.257 136.183 l
276.800 134.385 l
278.487 132.414 l
280.075 130.555 l
281.734 128.607 l
283.356 126.697 l
285.055 124.693 l
286.690 122.758 l
288.363 120.773 l
290.022 118.800 l
291.547 116.982 l
293.294 114.894 l
294.856 113.021 l
296.523 111.019 l
298.117 109.098 l
299.888 106.959 l
301.421 105.103 l
303.162 102.990 l
304.748 101.059 l
306.483 98.9423 l
307.980 97.1108 l
309.684 95.0198 l
311.331 92.9946 l
312.977 90.9656 l
314.617 88.9388 l
316.192 86.9867 l
317.895 84.8711 l
319.518 82.8496 l
321.226 80.7164 l
322.772 78.7804 l
324.481 76.6354 l
326.118 74.5755 l
327.751 72.5152 l
329.456 70.3577 l
331.027 68.3654 l
332.636 66.3200 l
334.412 64.0556 l
336.020 62.0000 l
337.665 59.8923 l
339.337 57.7433 l
340.875 55.7630 l
342.514 53.6468 l
344.140 51.5413 l
345.880 49.2832 l
347.415 47.2854 l
349.187 44.9743 l
350.785 42.8833 l
352.367 40.8092 l
354.068 38.5731 l
355.775 36.3219 l
357.329 34.2685 l
358.979 32.0824 l
360.589 29.9435 l
362.335 27.6188 l
363.845 25.6022 l
365.580 23.2801 l
367.210 21.0915 l
368.825 18.9186 l
370.442 16.7384 l
372.090 14.5090 l
373.837 12.1396 l
375.440 9.96145 l
377.021 7.80593 l
378.712 5.49585 l
380.399 3.18466 l
381.989 1.00000 l
S
cliprestore
newpath
0 0 m
0 390.000 l
390.000 390.000 l
390.000 0 l
h
W
Q
q
1.00000 w
2 J
0 j
[ 1.00000 0 0 1.00000 252.446 154.823 ] concat
newpath
6.00000 3.00000 m
6.00000 4.65685 4.65685 6.00000 3.00000 6.00000  c
1.34314 6.00000 0 4.65685 0 3.00000  c
0 1.34314 1.34314 0 3.00000 0  c
4.65685 0 6.00000 1.34314 6.00000 3.00000  c
h
S
newpath
6.00000 3.00000 m
6.00000 4.65685 4.65685 6.00000 3.00000 6.00000  c
1.34314 6.00000 0 4.65685 0 3.00000  c
0 1.34314 1.34314 0 3.00000 0  c
4.65685 0 6.00000 1.34314 6.00000 3.00000  c
h
f
[ 1.00000 0 0 1.00000 -252.446 -154.823 ] concat
Q
Q
q
1.00000 w
2 J
0 j
q
0 J
1 j
newpath
55.0000 355.000 m
381.989 355.000 l
S
Q
0 J
1 j
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
214 374 8 15 rc
Q
cliprestore
newpath
0 0 m
0 390.000 l
390.000 390.000 l
390.000 0 l
h
W
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0 0 1.00000 0 0 ] concat
q
q
0 w
newpath
55.0000 355.000 m
55.0000 359.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
56.4697 371.747 m
56.4697 370.765 56.6178 369.920 56.9140 369.211  c
57.2102 368.502 57.6038 367.974 58.0947 367.627  c
58.4755 367.352 58.8691 367.214 59.2753 367.214  c
59.9355 367.214 60.5279 367.551 61.0527 368.224  c
61.7086 369.057 62.0366 370.187 62.0366 371.613  c
62.0366 372.612 61.8927 373.460 61.6049 374.159  c
61.3172 374.857 60.9501 375.364 60.5036 375.679  c
60.0572 375.994 59.6266 376.152 59.2119 376.152  c
58.3909 376.152 57.7075 375.667 57.1616 374.698  c
56.7003 373.882 56.4697 372.898 56.4697 371.747  c
h
57.7138 371.905 m
57.7138 373.090 57.8598 374.057 58.1518 374.806  c
58.3930 375.437 58.7527 375.752 59.2309 375.752  c
59.4594 375.752 59.6964 375.649 59.9418 375.444  c
60.1873 375.239 60.3735 374.895 60.5004 374.413  c
60.6951 373.685 60.7924 372.659 60.7924 371.334  c
60.7924 370.352 60.6909 369.533 60.4877 368.877  c
60.3354 368.391 60.1386 368.046 59.8974 367.843  c
59.7239 367.703 59.5144 367.633 59.2690 367.633  c
58.9812 367.633 58.7252 367.762 58.5009 368.021  c
58.1962 368.372 57.9889 368.924 57.8789 369.677  c
57.7688 370.431 57.7138 371.173 57.7138 371.905  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
164.000 355.000 m
164.000 359.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
170.643 367.392 m
170.147 368.471 l
167.558 368.471 l
166.993 369.627 l
168.114 369.792 169.003 370.208 169.659 370.877  c
170.222 371.453 170.503 372.130 170.503 372.908  c
170.503 373.361 170.411 373.780 170.227 374.165  c
170.043 374.550 169.811 374.878 169.532 375.149  c
169.252 375.420 168.941 375.638 168.599 375.803  c
168.112 376.036 167.613 376.152 167.101 376.152  c
166.584 376.152 166.209 376.064 165.974 375.888  c
165.739 375.713 165.622 375.519 165.622 375.308  c
165.622 375.189 165.670 375.084 165.768 374.993  c
165.865 374.902 165.988 374.857 166.136 374.857  c
166.246 374.857 166.342 374.874 166.425 374.908  c
166.507 374.942 166.648 375.028 166.847 375.168  c
167.164 375.388 167.486 375.498 167.812 375.498  c
168.307 375.498 168.741 375.311 169.116 374.936  c
169.491 374.562 169.678 374.106 169.678 373.568  c
169.678 373.048 169.511 372.562 169.176 372.112  c
168.842 371.661 168.381 371.313 167.793 371.067  c
167.331 370.877 166.703 370.767 165.907 370.737  c
167.558 367.392 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
273.000 355.000 m
273.000 359.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
271.523 368.236 m
273.618 367.214 l
273.827 367.214 l
273.827 374.482 l
273.827 374.965 273.847 375.265 273.887 375.384  c
273.928 375.502 274.011 375.593 274.138 375.657  c
274.265 375.720 274.523 375.756 274.913 375.765  c
274.913 376.000 l
271.675 376.000 l
271.675 375.765 l
272.082 375.756 272.344 375.721 272.462 375.660  c
272.581 375.599 272.663 375.516 272.710 375.412  c
272.757 375.309 272.780 374.999 272.780 374.482  c
272.780 369.836 l
272.780 369.210 272.759 368.808 272.716 368.630  c
272.687 368.495 272.633 368.395 272.554 368.332  c
272.476 368.268 272.382 368.236 272.272 368.236  c
272.115 368.236 271.897 368.302 271.618 368.433  c
h
277.469 371.747 m
277.469 370.765 277.617 369.920 277.914 369.211  c
278.210 368.502 278.603 367.974 279.094 367.627  c
279.475 367.352 279.869 367.214 280.275 367.214  c
280.935 367.214 281.528 367.551 282.052 368.224  c
282.708 369.057 283.036 370.187 283.036 371.613  c
283.036 372.612 282.892 373.460 282.605 374.159  c
282.317 374.857 281.950 375.364 281.503 375.679  c
281.057 375.994 280.626 376.152 280.211 376.152  c
279.391 376.152 278.707 375.667 278.161 374.698  c
277.700 373.882 277.469 372.898 277.469 371.747  c
h
278.713 371.905 m
278.713 373.090 278.859 374.057 279.151 374.806  c
279.393 375.437 279.752 375.752 280.231 375.752  c
280.459 375.752 280.696 375.649 280.941 375.444  c
281.187 375.239 281.373 374.895 281.500 374.413  c
281.695 373.685 281.792 372.659 281.792 371.334  c
281.792 370.352 281.690 369.533 281.487 368.877  c
281.335 368.391 281.138 368.046 280.897 367.843  c
280.724 367.703 280.514 367.633 280.269 367.633  c
279.981 367.633 279.725 367.762 279.501 368.021  c
279.196 368.372 278.988 368.924 278.878 369.677  c
278.768 370.431 278.713 371.173 278.713 371.905  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
382.000 355.000 m
382.000 359.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
380.523 368.236 m
382.618 367.214 l
382.827 367.214 l
382.827 374.482 l
382.827 374.965 382.847 375.265 382.887 375.384  c
382.928 375.502 383.011 375.593 383.138 375.657  c
383.265 375.720 383.523 375.756 383.913 375.765  c
383.913 376.000 l
380.675 376.000 l
380.675 375.765 l
381.082 375.756 381.344 375.721 381.462 375.660  c
381.581 375.599 381.663 375.516 381.710 375.412  c
381.757 375.309 381.780 374.999 381.780 374.482  c
381.780 369.836 l
381.780 369.210 381.759 368.808 381.716 368.630  c
381.687 368.495 381.633 368.395 381.554 368.332  c
381.476 368.268 381.382 368.236 381.272 368.236  c
381.115 368.236 380.897 368.302 380.618 368.433  c
h
391.643 367.392 m
391.147 368.471 l
388.558 368.471 l
387.993 369.627 l
389.114 369.792 390.003 370.208 390.659 370.877  c
391.222 371.453 391.503 372.130 391.503 372.908  c
391.503 373.361 391.411 373.780 391.227 374.165  c
391.043 374.550 390.811 374.878 390.532 375.149  c
390.252 375.420 389.941 375.638 389.599 375.803  c
389.112 376.036 388.613 376.152 388.101 376.152  c
387.584 376.152 387.209 376.064 386.974 375.888  c
386.739 375.713 386.622 375.519 386.622 375.308  c
386.622 375.189 386.670 375.084 386.768 374.993  c
386.865 374.902 386.988 374.857 387.136 374.857  c
387.246 374.857 387.342 374.874 387.425 374.908  c
387.507 374.942 387.648 375.028 387.847 375.168  c
388.164 375.388 388.486 375.498 388.812 375.498  c
389.307 375.498 389.741 375.311 390.116 374.936  c
390.491 374.562 390.678 374.106 390.678 373.568  c
390.678 373.048 390.511 372.562 390.176 372.112  c
389.842 371.661 389.381 371.313 388.793 371.067  c
388.331 370.877 387.703 370.767 386.907 370.737  c
388.558 367.392 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
77.0000 355.000 m
77.0000 357.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
99.0000 355.000 m
99.0000 357.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
120.000 355.000 m
120.000 357.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
142.000 355.000 m
142.000 357.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
186.000 355.000 m
186.000 357.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
208.000 355.000 m
208.000 357.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
229.000 355.000 m
229.000 357.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
251.000 355.000 m
251.000 357.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
295.000 355.000 m
295.000 357.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
317.000 355.000 m
317.000 357.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
338.000 355.000 m
338.000 357.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
360.000 355.000 m
360.000 357.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
Q
2 J
0 j
q
0 J
1 j
newpath
55.0000 355.000 m
55.0000 1.00000 l
S
Q
0 J
1 j
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
0 170 8 15 rc
Q
cliprestore
newpath
0 0 m
0 390.000 l
390.000 390.000 l
390.000 0 l
h
W
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0 0 1.00000 0 0 ] concat
q
q
0 w
newpath
55.0000 303.000 m
51.0000 303.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
23.0493 308.826 m
23.0493 309.727 l
21.8940 309.727 l
21.8940 312.000 l
20.8466 312.000 l
20.8466 309.727 l
17.2031 309.727 l
17.2031 308.915 l
21.1958 303.214 l
21.8940 303.214 l
21.8940 308.826 l
h
20.8466 308.826 m
20.8466 304.554 l
17.8252 308.826 l
h
24.4697 307.747 m
24.4697 306.765 24.6178 305.920 24.9140 305.211  c
25.2102 304.502 25.6038 303.974 26.0947 303.627  c
26.4755 303.352 26.8691 303.214 27.2753 303.214  c
27.9355 303.214 28.5279 303.551 29.0527 304.224  c
29.7086 305.057 30.0366 306.187 30.0366 307.613  c
30.0366 308.612 29.8927 309.460 29.6049 310.159  c
29.3172 310.857 28.9501 311.364 28.5036 311.679  c
28.0572 311.994 27.6266 312.152 27.2119 312.152  c
26.3909 312.152 25.7075 311.667 25.1616 310.698  c
24.7003 309.882 24.4697 308.898 24.4697 307.747  c
h
25.7138 307.905 m
25.7138 309.090 25.8598 310.057 26.1518 310.806  c
26.3930 311.437 26.7527 311.752 27.2309 311.752  c
27.4594 311.752 27.6964 311.649 27.9418 311.444  c
28.1873 311.239 28.3735 310.895 28.5004 310.413  c
28.6951 309.685 28.7924 308.659 28.7924 307.334  c
28.7924 306.352 28.6909 305.533 28.4877 304.877  c
28.3354 304.391 28.1386 304.046 27.8974 303.843  c
27.7239 303.703 27.5144 303.633 27.2690 303.633  c
26.9812 303.633 26.7252 303.762 26.5009 304.021  c
26.1962 304.372 25.9889 304.924 25.8789 305.677  c
25.7688 306.431 25.7138 307.173 25.7138 307.905  c
h
31.4697 307.747 m
31.4697 306.765 31.6178 305.920 31.9140 305.211  c
32.2102 304.502 32.6038 303.974 33.0947 303.627  c
33.4755 303.352 33.8691 303.214 34.2753 303.214  c
34.9355 303.214 35.5279 303.551 36.0527 304.224  c
36.7086 305.057 37.0366 306.187 37.0366 307.613  c
37.0366 308.612 36.8927 309.460 36.6049 310.159  c
36.3172 310.857 35.9501 311.364 35.5036 311.679  c
35.0572 311.994 34.6266 312.152 34.2119 312.152  c
33.3909 312.152 32.7075 311.667 32.1616 310.698  c
31.7003 309.882 31.4697 308.898 31.4697 307.747  c
h
32.7138 307.905 m
32.7138 309.090 32.8598 310.057 33.1518 310.806  c
33.3930 311.437 33.7527 311.752 34.2309 311.752  c
34.4594 311.752 34.6964 311.649 34.9418 311.444  c
35.1873 311.239 35.3735 310.895 35.5004 310.413  c
35.6951 309.685 35.7924 308.659 35.7924 307.334  c
35.7924 306.352 35.6909 305.533 35.4877 304.877  c
35.3354 304.391 35.1386 304.046 34.8974 303.843  c
34.7239 303.703 34.5144 303.633 34.2690 303.633  c
33.9812 303.633 33.7252 303.762 33.5009 304.021  c
33.1962 304.372 32.9889 304.924 32.8789 305.677  c
32.7688 306.431 32.7138 307.173 32.7138 307.905  c
h
38.4697 307.747 m
38.4697 306.765 38.6178 305.920 38.9140 305.211  c
39.2102 304.502 39.6038 303.974 40.0947 303.627  c
40.4755 303.352 40.8691 303.214 41.2753 303.214  c
41.9355 303.214 42.5279 303.551 43.0527 304.224  c
43.7086 305.057 44.0366 306.187 44.0366 307.613  c
44.0366 308.612 43.8927 309.460 43.6049 310.159  c
43.3172 310.857 42.9501 311.364 42.5036 311.679  c
42.0572 311.994 41.6266 312.152 41.2119 312.152  c
40.3909 312.152 39.7075 311.667 39.1616 310.698  c
38.7003 309.882 38.4697 308.898 38.4697 307.747  c
h
39.7138 307.905 m
39.7138 309.090 39.8598 310.057 40.1518 310.806  c
40.3930 311.437 40.7527 311.752 41.2309 311.752  c
41.4594 311.752 41.6964 311.649 41.9418 311.444  c
42.1873 311.239 42.3735 310.895 42.5004 310.413  c
42.6951 309.685 42.7924 308.659 42.7924 307.334  c
42.7924 306.352 42.6909 305.533 42.4877 304.877  c
42.3354 304.391 42.1386 304.046 41.8974 303.843  c
41.7239 303.703 41.5144 303.633 41.2690 303.633  c
40.9812 303.633 40.7252 303.762 40.5009 304.021  c
40.1962 304.372 39.9889 304.924 39.8789 305.677  c
39.7688 306.431 39.7138 307.173 39.7138 307.905  c
h
45.4697 307.747 m
45.4697 306.765 45.6178 305.920 45.9140 305.211  c
46.2102 304.502 46.6038 303.974 47.0947 303.627  c
47.4755 303.352 47.8691 303.214 48.2753 303.214  c
48.9355 303.214 49.5279 303.551 50.0527 304.224  c
50.7086 305.057 51.0366 306.187 51.0366 307.613  c
51.0366 308.612 50.8927 309.460 50.6049 310.159  c
50.3172 310.857 49.9501 311.364 49.5036 311.679  c
49.0572 311.994 48.6266 312.152 48.2119 312.152  c
47.3909 312.152 46.7075 311.667 46.1616 310.698  c
45.7003 309.882 45.4697 308.898 45.4697 307.747  c
h
46.7138 307.905 m
46.7138 309.090 46.8598 310.057 47.1518 310.806  c
47.3930 311.437 47.7527 311.752 48.2309 311.752  c
48.4594 311.752 48.6964 311.649 48.9418 311.444  c
49.1873 311.239 49.3735 310.895 49.5004 310.413  c
49.6951 309.685 49.7924 308.659 49.7924 307.334  c
49.7924 306.352 49.6909 305.533 49.4877 304.877  c
49.3354 304.391 49.1386 304.046 48.8974 303.843  c
48.7239 303.703 48.5144 303.633 48.2690 303.633  c
47.9812 303.633 47.7252 303.762 47.5009 304.021  c
47.1962 304.372 46.9889 304.924 46.8789 305.677  c
46.7688 306.431 46.7138 307.173 46.7138 307.905  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
55.0000 230.000 m
51.0000 230.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
23.0493 236.826 m
23.0493 237.727 l
21.8940 237.727 l
21.8940 240.000 l
20.8466 240.000 l
20.8466 237.727 l
17.2031 237.727 l
17.2031 236.915 l
21.1958 231.214 l
21.8940 231.214 l
21.8940 236.826 l
h
20.8466 236.826 m
20.8466 232.554 l
17.8252 236.826 l
h
29.6430 231.392 m
29.1479 232.471 l
26.5581 232.471 l
25.9931 233.627 l
27.1145 233.792 28.0032 234.208 28.6591 234.877  c
29.2220 235.453 29.5034 236.130 29.5034 236.908  c
29.5034 237.361 29.4113 237.780 29.2272 238.165  c
29.0432 238.550 28.8115 238.878 28.5322 239.149  c
28.2529 239.420 27.9418 239.638 27.5991 239.803  c
27.1124 240.036 26.6131 240.152 26.1010 240.152  c
25.5848 240.152 25.2092 240.064 24.9743 239.888  c
24.7395 239.713 24.6220 239.519 24.6220 239.308  c
24.6220 239.189 24.6707 239.084 24.7680 238.993  c
24.8654 238.902 24.9881 238.857 25.1362 238.857  c
25.2462 238.857 25.3425 238.874 25.4250 238.908  c
25.5075 238.942 25.6482 239.028 25.8471 239.168  c
26.1645 239.388 26.4861 239.498 26.8120 239.498  c
27.3071 239.498 27.7419 239.311 28.1164 238.936  c
28.4909 238.562 28.6782 238.106 28.6782 237.568  c
28.6782 237.048 28.5110 236.562 28.1767 236.112  c
27.8424 235.661 27.3811 235.313 26.7929 235.067  c
26.3317 234.877 25.7032 234.767 24.9077 234.737  c
26.5581 231.392 l
h
31.4697 235.747 m
31.4697 234.765 31.6178 233.920 31.9140 233.211  c
32.2102 232.502 32.6038 231.974 33.0947 231.627  c
33.4755 231.352 33.8691 231.214 34.2753 231.214  c
34.9355 231.214 35.5279 231.551 36.0527 232.224  c
36.7086 233.057 37.0366 234.187 37.0366 235.613  c
37.0366 236.612 36.8927 237.460 36.6049 238.159  c
36.3172 238.857 35.9501 239.364 35.5036 239.679  c
35.0572 239.994 34.6266 240.152 34.2119 240.152  c
33.3909 240.152 32.7075 239.667 32.1616 238.698  c
31.7003 237.882 31.4697 236.898 31.4697 235.747  c
h
32.7138 235.905 m
32.7138 237.090 32.8598 238.057 33.1518 238.806  c
33.3930 239.437 33.7527 239.752 34.2309 239.752  c
34.4594 239.752 34.6964 239.649 34.9418 239.444  c
35.1873 239.239 35.3735 238.895 35.5004 238.413  c
35.6951 237.685 35.7924 236.659 35.7924 235.334  c
35.7924 234.352 35.6909 233.533 35.4877 232.877  c
35.3354 232.391 35.1386 232.046 34.8974 231.843  c
34.7239 231.703 34.5144 231.633 34.2690 231.633  c
33.9812 231.633 33.7252 231.762 33.5009 232.021  c
33.1962 232.372 32.9889 232.924 32.8789 233.677  c
32.7688 234.431 32.7138 235.173 32.7138 235.905  c
h
38.4697 235.747 m
38.4697 234.765 38.6178 233.920 38.9140 233.211  c
39.2102 232.502 39.6038 231.974 40.0947 231.627  c
40.4755 231.352 40.8691 231.214 41.2753 231.214  c
41.9355 231.214 42.5279 231.551 43.0527 232.224  c
43.7086 233.057 44.0366 234.187 44.0366 235.613  c
44.0366 236.612 43.8927 237.460 43.6049 238.159  c
43.3172 238.857 42.9501 239.364 42.5036 239.679  c
42.0572 239.994 41.6266 240.152 41.2119 240.152  c
40.3909 240.152 39.7075 239.667 39.1616 238.698  c
38.7003 237.882 38.4697 236.898 38.4697 235.747  c
h
39.7138 235.905 m
39.7138 237.090 39.8598 238.057 40.1518 238.806  c
40.3930 239.437 40.7527 239.752 41.2309 239.752  c
41.4594 239.752 41.6964 239.649 41.9418 239.444  c
42.1873 239.239 42.3735 238.895 42.5004 238.413  c
42.6951 237.685 42.7924 236.659 42.7924 235.334  c
42.7924 234.352 42.6909 233.533 42.4877 232.877  c
42.3354 232.391 42.1386 232.046 41.8974 231.843  c
41.7239 231.703 41.5144 231.633 41.2690 231.633  c
40.9812 231.633 40.7252 231.762 40.5009 232.021  c
40.1962 232.372 39.9889 232.924 39.8789 233.677  c
39.7688 234.431 39.7138 235.173 39.7138 235.905  c
h
45.4697 235.747 m
45.4697 234.765 45.6178 233.920 45.9140 233.211  c
46.2102 232.502 46.6038 231.974 47.0947 231.627  c
47.4755 231.352 47.8691 231.214 48.2753 231.214  c
48.9355 231.214 49.5279 231.551 50.0527 232.224  c
50.7086 233.057 51.0366 234.187 51.0366 235.613  c
51.0366 236.612 50.8927 237.460 50.6049 238.159  c
50.3172 238.857 49.9501 239.364 49.5036 239.679  c
49.0572 239.994 48.6266 240.152 48.2119 240.152  c
47.3909 240.152 46.7075 239.667 46.1616 238.698  c
45.7003 237.882 45.4697 236.898 45.4697 235.747  c
h
46.7138 235.905 m
46.7138 237.090 46.8598 238.057 47.1518 238.806  c
47.3930 239.437 47.7527 239.752 48.2309 239.752  c
48.4594 239.752 48.6964 239.649 48.9418 239.444  c
49.1873 239.239 49.3735 238.895 49.5004 238.413  c
49.6951 237.685 49.7924 236.659 49.7924 235.334  c
49.7924 234.352 49.6909 233.533 49.4877 232.877  c
49.3354 232.391 49.1386 232.046 48.8974 231.843  c
48.7239 231.703 48.5144 231.633 48.2690 231.633  c
47.9812 231.633 47.7252 231.762 47.5009 232.021  c
47.1962 232.372 46.9889 232.924 46.8789 233.677  c
46.7688 234.431 46.7138 235.173 46.7138 235.905  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
55.0000 158.000 m
51.0000 158.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
22.6430 159.392 m
22.1479 160.471 l
19.5581 160.471 l
18.9931 161.627 l
20.1145 161.792 21.0032 162.208 21.6591 162.877  c
22.2220 163.453 22.5034 164.130 22.5034 164.908  c
22.5034 165.361 22.4113 165.780 22.2272 166.165  c
22.0432 166.550 21.8115 166.878 21.5322 167.149  c
21.2529 167.420 20.9418 167.638 20.5991 167.803  c
20.1124 168.036 19.6131 168.152 19.1010 168.152  c
18.5848 168.152 18.2092 168.064 17.9743 167.888  c
17.7395 167.713 17.6220 167.519 17.6220 167.308  c
17.6220 167.189 17.6707 167.084 17.7680 166.993  c
17.8654 166.902 17.9881 166.857 18.1362 166.857  c
18.2462 166.857 18.3425 166.874 18.4250 166.908  c
18.5075 166.942 18.6482 167.028 18.8471 167.168  c
19.1645 167.388 19.4861 167.498 19.8120 167.498  c
20.3071 167.498 20.7419 167.311 21.1164 166.936  c
21.4909 166.562 21.6782 166.106 21.6782 165.568  c
21.6782 165.048 21.5110 164.562 21.1767 164.112  c
20.8424 163.661 20.3811 163.313 19.7929 163.067  c
19.3317 162.877 18.7032 162.767 17.9077 162.737  c
19.5581 159.392 l
h
24.4697 163.747 m
24.4697 162.765 24.6178 161.920 24.9140 161.211  c
25.2102 160.502 25.6038 159.974 26.0947 159.627  c
26.4755 159.352 26.8691 159.214 27.2753 159.214  c
27.9355 159.214 28.5279 159.551 29.0527 160.224  c
29.7086 161.057 30.0366 162.187 30.0366 163.613  c
30.0366 164.612 29.8927 165.460 29.6049 166.159  c
29.3172 166.857 28.9501 167.364 28.5036 167.679  c
28.0572 167.994 27.6266 168.152 27.2119 168.152  c
26.3909 168.152 25.7075 167.667 25.1616 166.698  c
24.7003 165.882 24.4697 164.898 24.4697 163.747  c
h
25.7138 163.905 m
25.7138 165.090 25.8598 166.057 26.1518 166.806  c
26.3930 167.437 26.7527 167.752 27.2309 167.752  c
27.4594 167.752 27.6964 167.649 27.9418 167.444  c
28.1873 167.239 28.3735 166.895 28.5004 166.413  c
28.6951 165.685 28.7924 164.659 28.7924 163.334  c
28.7924 162.352 28.6909 161.533 28.4877 160.877  c
28.3354 160.391 28.1386 160.046 27.8974 159.843  c
27.7239 159.703 27.5144 159.633 27.2690 159.633  c
26.9812 159.633 26.7252 159.762 26.5009 160.021  c
26.1962 160.372 25.9889 160.924 25.8789 161.677  c
25.7688 162.431 25.7138 163.173 25.7138 163.905  c
h
31.4697 163.747 m
31.4697 162.765 31.6178 161.920 31.9140 161.211  c
32.2102 160.502 32.6038 159.974 33.0947 159.627  c
33.4755 159.352 33.8691 159.214 34.2753 159.214  c
34.9355 159.214 35.5279 159.551 36.0527 160.224  c
36.7086 161.057 37.0366 162.187 37.0366 163.613  c
37.0366 164.612 36.8927 165.460 36.6049 166.159  c
36.3172 166.857 35.9501 167.364 35.5036 167.679  c
35.0572 167.994 34.6266 168.152 34.2119 168.152  c
33.3909 168.152 32.7075 167.667 32.1616 166.698  c
31.7003 165.882 31.4697 164.898 31.4697 163.747  c
h
32.7138 163.905 m
32.7138 165.090 32.8598 166.057 33.1518 166.806  c
33.3930 167.437 33.7527 167.752 34.2309 167.752  c
34.4594 167.752 34.6964 167.649 34.9418 167.444  c
35.1873 167.239 35.3735 166.895 35.5004 166.413  c
35.6951 165.685 35.7924 164.659 35.7924 163.334  c
35.7924 162.352 35.6909 161.533 35.4877 160.877  c
35.3354 160.391 35.1386 160.046 34.8974 159.843  c
34.7239 159.703 34.5144 159.633 34.2690 159.633  c
33.9812 159.633 33.7252 159.762 33.5009 160.021  c
33.1962 160.372 32.9889 160.924 32.8789 161.677  c
32.7688 162.431 32.7138 163.173 32.7138 163.905  c
h
38.4697 163.747 m
38.4697 162.765 38.6178 161.920 38.9140 161.211  c
39.2102 160.502 39.6038 159.974 40.0947 159.627  c
40.4755 159.352 40.8691 159.214 41.2753 159.214  c
41.9355 159.214 42.5279 159.551 43.0527 160.224  c
43.7086 161.057 44.0366 162.187 44.0366 163.613  c
44.0366 164.612 43.8927 165.460 43.6049 166.159  c
43.3172 166.857 42.9501 167.364 42.5036 167.679  c
42.0572 167.994 41.6266 168.152 41.2119 168.152  c
40.3909 168.152 39.7075 167.667 39.1616 166.698  c
38.7003 165.882 38.4697 164.898 38.4697 163.747  c
h
39.7138 163.905 m
39.7138 165.090 39.8598 166.057 40.1518 166.806  c
40.3930 167.437 40.7527 167.752 41.2309 167.752  c
41.4594 167.752 41.6964 167.649 41.9418 167.444  c
42.1873 167.239 42.3735 166.895 42.5004 166.413  c
42.6951 165.685 42.7924 164.659 42.7924 163.334  c
42.7924 162.352 42.6909 161.533 42.4877 160.877  c
42.3354 160.391 42.1386 160.046 41.8974 159.843  c
41.7239 159.703 41.5144 159.633 41.2690 159.633  c
40.9812 159.633 40.7252 159.762 40.5009 160.021  c
40.1962 160.372 39.9889 160.924 39.8789 161.677  c
39.7688 162.431 39.7138 163.173 39.7138 163.905  c
h
45.4697 163.747 m
45.4697 162.765 45.6178 161.920 45.9140 161.211  c
46.2102 160.502 46.6038 159.974 47.0947 159.627  c
47.4755 159.352 47.8691 159.214 48.2753 159.214  c
48.9355 159.214 49.5279 159.551 50.0527 160.224  c
50.7086 161.057 51.0366 162.187 51.0366 163.613  c
51.0366 164.612 50.8927 165.460 50.6049 166.159  c
50.3172 166.857 49.9501 167.364 49.5036 167.679  c
49.0572 167.994 48.6266 168.152 48.2119 168.152  c
47.3909 168.152 46.7075 167.667 46.1616 166.698  c
45.7003 165.882 45.4697 164.898 45.4697 163.747  c
h
46.7138 163.905 m
46.7138 165.090 46.8598 166.057 47.1518 166.806  c
47.3930 167.437 47.7527 167.752 48.2309 167.752  c
48.4594 167.752 48.6964 167.649 48.9418 167.444  c
49.1873 167.239 49.3735 166.895 49.5004 166.413  c
49.6951 165.685 49.7924 164.659 49.7924 163.334  c
49.7924 162.352 49.6909 161.533 49.4877 160.877  c
49.3354 160.391 49.1386 160.046 48.8974 159.843  c
48.7239 159.703 48.5144 159.633 48.2690 159.633  c
47.9812 159.633 47.7252 159.762 47.5009 160.021  c
47.1962 160.372 46.9889 160.924 46.8789 161.677  c
46.7688 162.431 46.7138 163.173 46.7138 163.905  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
55.0000 86.0000 m
51.0000 86.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
22.6430 87.3925 m
22.1479 88.4716 l
19.5581 88.4716 l
18.9931 89.6269 l
20.1145 89.7919 21.0032 90.2088 21.6591 90.8774  c
22.2220 91.4529 22.5034 92.1300 22.5034 92.9086  c
22.5034 93.3614 22.4113 93.7804 22.2272 94.1655  c
22.0432 94.5506 21.8115 94.8785 21.5322 95.1494  c
21.2529 95.4202 20.9418 95.6381 20.5991 95.8032  c
20.1124 96.0359 19.6131 96.1523 19.1010 96.1523  c
18.5848 96.1523 18.2092 96.0645 17.9743 95.8889  c
17.7395 95.7133 17.6220 95.5196 17.6220 95.3081  c
17.6220 95.1896 17.6707 95.0848 17.7680 94.9939  c
17.8654 94.9029 17.9881 94.8574 18.1362 94.8574  c
18.2462 94.8574 18.3425 94.8743 18.4250 94.9082  c
18.5075 94.9420 18.6482 95.0288 18.8471 95.1684  c
19.1645 95.3885 19.4861 95.4985 19.8120 95.4985  c
20.3071 95.4985 20.7419 95.3112 21.1164 94.9367  c
21.4909 94.5622 21.6782 94.1062 21.6782 93.5688  c
21.6782 93.0483 21.5110 92.5627 21.1767 92.1120  c
20.8424 91.6613 20.3811 91.3133 19.7929 91.0678  c
19.3317 90.8774 18.7032 90.7674 17.9077 90.7377  c
19.5581 87.3925 l
h
29.6430 87.3925 m
29.1479 88.4716 l
26.5581 88.4716 l
25.9931 89.6269 l
27.1145 89.7919 28.0032 90.2088 28.6591 90.8774  c
29.2220 91.4529 29.5034 92.1300 29.5034 92.9086  c
29.5034 93.3614 29.4113 93.7804 29.2272 94.1655  c
29.0432 94.5506 28.8115 94.8785 28.5322 95.1494  c
28.2529 95.4202 27.9418 95.6381 27.5991 95.8032  c
27.1124 96.0359 26.6131 96.1523 26.1010 96.1523  c
25.5848 96.1523 25.2092 96.0645 24.9743 95.8889  c
24.7395 95.7133 24.6220 95.5196 24.6220 95.3081  c
24.6220 95.1896 24.6707 95.0848 24.7680 94.9939  c
24.8654 94.9029 24.9881 94.8574 25.1362 94.8574  c
25.2462 94.8574 25.3425 94.8743 25.4250 94.9082  c
25.5075 94.9420 25.6482 95.0288 25.8471 95.1684  c
26.1645 95.3885 26.4861 95.4985 26.8120 95.4985  c
27.3071 95.4985 27.7419 95.3112 28.1164 94.9367  c
28.4909 94.5622 28.6782 94.1062 28.6782 93.5688  c
28.6782 93.0483 28.5110 92.5627 28.1767 92.1120  c
27.8424 91.6613 27.3811 91.3133 26.7929 91.0678  c
26.3317 90.8774 25.7032 90.7674 24.9077 90.7377  c
26.5581 87.3925 l
h
31.4697 91.7470 m
31.4697 90.7653 31.6178 89.9200 31.9140 89.2111  c
32.2102 88.5023 32.6038 87.9744 33.0947 87.6274  c
33.4755 87.3523 33.8691 87.2148 34.2753 87.2148  c
34.9355 87.2148 35.5279 87.5512 36.0527 88.2241  c
36.7086 89.0577 37.0366 90.1876 37.0366 91.6137  c
37.0366 92.6124 36.8927 93.4609 36.6049 94.1591  c
36.3172 94.8574 35.9501 95.3641 35.5036 95.6794  c
35.0572 95.9947 34.6266 96.1523 34.2119 96.1523  c
33.3909 96.1523 32.7075 95.6678 32.1616 94.6987  c
31.7003 93.8820 31.4697 92.8981 31.4697 91.7470  c
h
32.7138 91.9057 m
32.7138 93.0906 32.8598 94.0576 33.1518 94.8066  c
33.3930 95.4371 33.7527 95.7524 34.2309 95.7524  c
34.4594 95.7524 34.6964 95.6498 34.9418 95.4445  c
35.1873 95.2393 35.3735 94.8955 35.5004 94.4130  c
35.6951 93.6852 35.7924 92.6590 35.7924 91.3344  c
35.7924 90.3527 35.6909 89.5338 35.4877 88.8779  c
35.3354 88.3912 35.1386 88.0463 34.8974 87.8432  c
34.7239 87.7036 34.5144 87.6337 34.2690 87.6337  c
33.9812 87.6337 33.7252 87.7628 33.5009 88.0210  c
33.1962 88.3722 32.9889 88.9244 32.8789 89.6777  c
32.7688 90.4309 32.7138 91.1736 32.7138 91.9057  c
h
38.4697 91.7470 m
38.4697 90.7653 38.6178 89.9200 38.9140 89.2111  c
39.2102 88.5023 39.6038 87.9744 40.0947 87.6274  c
40.4755 87.3523 40.8691 87.2148 41.2753 87.2148  c
41.9355 87.2148 42.5279 87.5512 43.0527 88.2241  c
43.7086 89.0577 44.0366 90.1876 44.0366 91.6137  c
44.0366 92.6124 43.8927 93.4609 43.6049 94.1591  c
43.3172 94.8574 42.9501 95.3641 42.5036 95.6794  c
42.0572 95.9947 41.6266 96.1523 41.2119 96.1523  c
40.3909 96.1523 39.7075 95.6678 39.1616 94.6987  c
38.7003 93.8820 38.4697 92.8981 38.4697 91.7470  c
h
39.7138 91.9057 m
39.7138 93.0906 39.8598 94.0576 40.1518 94.8066  c
40.3930 95.4371 40.7527 95.7524 41.2309 95.7524  c
41.4594 95.7524 41.6964 95.6498 41.9418 95.4445  c
42.1873 95.2393 42.3735 94.8955 42.5004 94.4130  c
42.6951 93.6852 42.7924 92.6590 42.7924 91.3344  c
42.7924 90.3527 42.6909 89.5338 42.4877 88.8779  c
42.3354 88.3912 42.1386 88.0463 41.8974 87.8432  c
41.7239 87.7036 41.5144 87.6337 41.2690 87.6337  c
40.9812 87.6337 40.7252 87.7628 40.5009 88.0210  c
40.1962 88.3722 39.9889 88.9244 39.8789 89.6777  c
39.7688 90.4309 39.7138 91.1736 39.7138 91.9057  c
h
45.4697 91.7470 m
45.4697 90.7653 45.6178 89.9200 45.9140 89.2111  c
46.2102 88.5023 46.6038 87.9744 47.0947 87.6274  c
47.4755 87.3523 47.8691 87.2148 48.2753 87.2148  c
48.9355 87.2148 49.5279 87.5512 50.0527 88.2241  c
50.7086 89.0577 51.0366 90.1876 51.0366 91.6137  c
51.0366 92.6124 50.8927 93.4609 50.6049 94.1591  c
50.3172 94.8574 49.9501 95.3641 49.5036 95.6794  c
49.0572 95.9947 48.6266 96.1523 48.2119 96.1523  c
47.3909 96.1523 46.7075 95.6678 46.1616 94.6987  c
45.7003 93.8820 45.4697 92.8981 45.4697 91.7470  c
h
46.7138 91.9057 m
46.7138 93.0906 46.8598 94.0576 47.1518 94.8066  c
47.3930 95.4371 47.7527 95.7524 48.2309 95.7524  c
48.4594 95.7524 48.6964 95.6498 48.9418 95.4445  c
49.1873 95.2393 49.3735 94.8955 49.5004 94.4130  c
49.6951 93.6852 49.7924 92.6590 49.7924 91.3344  c
49.7924 90.3527 49.6909 89.5338 49.4877 88.8779  c
49.3354 88.3912 49.1386 88.0463 48.8974 87.8432  c
48.7239 87.7036 48.5144 87.6337 48.2690 87.6337  c
47.9812 87.6337 47.7252 87.7628 47.5009 88.0210  c
47.1962 88.3722 46.9889 88.9244 46.8789 89.6777  c
46.7688 90.4309 46.7138 91.1736 46.7138 91.9057  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
55.0000 14.0000 m
51.0000 14.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
22.8271 15.2148 m
22.8271 15.4497 l
22.2685 15.5047 21.8125 15.6158 21.4592 15.7829  c
21.1058 15.9501 20.7567 16.2050 20.4118 16.5478  c
20.0669 16.8906 19.7813 17.2725 19.5549 17.6936  c
19.3285 18.1146 19.1391 18.6150 18.9868 19.1948  c
19.5961 18.7758 20.2076 18.5664 20.8212 18.5664  c
21.4095 18.5664 21.9194 18.8033 22.3510 19.2773  c
22.7827 19.7513 22.9985 20.3606 22.9985 21.1054  c
22.9985 21.8248 22.7806 22.4807 22.3447 23.0732  c
21.8199 23.7926 21.1259 24.1523 20.2627 24.1523  c
19.6744 24.1523 19.1751 23.9576 18.7646 23.5683  c
17.9606 22.8108 17.5585 21.8291 17.5585 20.6230  c
17.5585 19.8528 17.7130 19.1207 18.0219 18.4267  c
18.3308 17.7327 18.7720 17.1170 19.3454 16.5795  c
19.9188 16.0421 20.4679 15.6803 20.9926 15.4941  c
21.5174 15.3079 22.0061 15.2148 22.4589 15.2148  c
h
18.8789 19.6582 m
18.8027 20.2294 18.7646 20.6907 18.7646 21.0419  c
18.7646 21.4482 18.8397 21.8894 18.9899 22.3654  c
19.1402 22.8415 19.3634 23.2192 19.6596 23.4985  c
19.8754 23.6974 20.1378 23.7968 20.4467 23.7968  c
20.8149 23.7968 21.1439 23.6233 21.4338 23.2763  c
21.7237 22.9293 21.8686 22.4342 21.8686 21.7910  c
21.8686 21.0673 21.7247 20.4410 21.4370 19.9121  c
21.1492 19.3831 20.7408 19.1186 20.2119 19.1186  c
20.0511 19.1186 19.8786 19.1525 19.6945 19.2202  c
19.5105 19.2879 19.2386 19.4339 18.8789 19.6582  c
h
24.4697 19.7470 m
24.4697 18.7653 24.6178 17.9200 24.9140 17.2111  c
25.2102 16.5023 25.6038 15.9744 26.0947 15.6274  c
26.4755 15.3523 26.8691 15.2148 27.2753 15.2148  c
27.9355 15.2148 28.5279 15.5512 29.0527 16.2241  c
29.7086 17.0577 30.0366 18.1876 30.0366 19.6137  c
30.0366 20.6124 29.8927 21.4609 29.6049 22.1591  c
29.3172 22.8574 28.9501 23.3641 28.5036 23.6794  c
28.0572 23.9947 27.6266 24.1523 27.2119 24.1523  c
26.3909 24.1523 25.7075 23.6678 25.1616 22.6987  c
24.7003 21.8820 24.4697 20.8981 24.4697 19.7470  c
h
25.7138 19.9057 m
25.7138 21.0906 25.8598 22.0576 26.1518 22.8066  c
26.3930 23.4371 26.7527 23.7524 27.2309 23.7524  c
27.4594 23.7524 27.6964 23.6498 27.9418 23.4445  c
28.1873 23.2393 28.3735 22.8955 28.5004 22.4130  c
28.6951 21.6852 28.7924 20.6590 28.7924 19.3344  c
28.7924 18.3527 28.6909 17.5338 28.4877 16.8779  c
28.3354 16.3912 28.1386 16.0463 27.8974 15.8432  c
27.7239 15.7036 27.5144 15.6337 27.2690 15.6337  c
26.9812 15.6337 26.7252 15.7628 26.5009 16.0210  c
26.1962 16.3722 25.9889 16.9244 25.8789 17.6777  c
25.7688 18.4309 25.7138 19.1736 25.7138 19.9057  c
h
31.4697 19.7470 m
31.4697 18.7653 31.6178 17.9200 31.9140 17.2111  c
32.2102 16.5023 32.6038 15.9744 33.0947 15.6274  c
33.4755 15.3523 33.8691 15.2148 34.2753 15.2148  c
34.9355 15.2148 35.5279 15.5512 36.0527 16.2241  c
36.7086 17.0577 37.0366 18.1876 37.0366 19.6137  c
37.0366 20.6124 36.8927 21.4609 36.6049 22.1591  c
36.3172 22.8574 35.9501 23.3641 35.5036 23.6794  c
35.0572 23.9947 34.6266 24.1523 34.2119 24.1523  c
33.3909 24.1523 32.7075 23.6678 32.1616 22.6987  c
31.7003 21.8820 31.4697 20.8981 31.4697 19.7470  c
h
32.7138 19.9057 m
32.7138 21.0906 32.8598 22.0576 33.1518 22.8066  c
33.3930 23.4371 33.7527 23.7524 34.2309 23.7524  c
34.4594 23.7524 34.6964 23.6498 34.9418 23.4445  c
35.1873 23.2393 35.3735 22.8955 35.5004 22.4130  c
35.6951 21.6852 35.7924 20.6590 35.7924 19.3344  c
35.7924 18.3527 35.6909 17.5338 35.4877 16.8779  c
35.3354 16.3912 35.1386 16.0463 34.8974 15.8432  c
34.7239 15.7036 34.5144 15.6337 34.2690 15.6337  c
33.9812 15.6337 33.7252 15.7628 33.5009 16.0210  c
33.1962 16.3722 32.9889 16.9244 32.8789 17.6777  c
32.7688 18.4309 32.7138 19.1736 32.7138 19.9057  c
h
38.4697 19.7470 m
38.4697 18.7653 38.6178 17.9200 38.9140 17.2111  c
39.2102 16.5023 39.6038 15.9744 40.0947 15.6274  c
40.4755 15.3523 40.8691 15.2148 41.2753 15.2148  c
41.9355 15.2148 42.5279 15.5512 43.0527 16.2241  c
43.7086 17.0577 44.0366 18.1876 44.0366 19.6137  c
44.0366 20.6124 43.8927 21.4609 43.6049 22.1591  c
43.3172 22.8574 42.9501 23.3641 42.5036 23.6794  c
42.0572 23.9947 41.6266 24.1523 41.2119 24.1523  c
40.3909 24.1523 39.7075 23.6678 39.1616 22.6987  c
38.7003 21.8820 38.4697 20.8981 38.4697 19.7470  c
h
39.7138 19.9057 m
39.7138 21.0906 39.8598 22.0576 40.1518 22.8066  c
40.3930 23.4371 40.7527 23.7524 41.2309 23.7524  c
41.4594 23.7524 41.6964 23.6498 41.9418 23.4445  c
42.1873 23.2393 42.3735 22.8955 42.5004 22.4130  c
42.6951 21.6852 42.7924 20.6590 42.7924 19.3344  c
42.7924 18.3527 42.6909 17.5338 42.4877 16.8779  c
42.3354 16.3912 42.1386 16.0463 41.8974 15.8432  c
41.7239 15.7036 41.5144 15.6337 41.2690 15.6337  c
40.9812 15.6337 40.7252 15.7628 40.5009 16.0210  c
40.1962 16.3722 39.9889 16.9244 39.8789 17.6777  c
39.7688 18.4309 39.7138 19.1736 39.7138 19.9057  c
h
45.4697 19.7470 m
45.4697 18.7653 45.6178 17.9200 45.9140 17.2111  c
46.2102 16.5023 46.6038 15.9744 47.0947 15.6274  c
47.4755 15.3523 47.8691 15.2148 48.2753 15.2148  c
48.9355 15.2148 49.5279 15.5512 50.0527 16.2241  c
50.7086 17.0577 51.0366 18.1876 51.0366 19.6137  c
51.0366 20.6124 50.8927 21.4609 50.6049 22.1591  c
50.3172 22.8574 49.9501 23.3641 49.5036 23.6794  c
49.0572 23.9947 48.6266 24.1523 48.2119 24.1523  c
47.3909 24.1523 46.7075 23.6678 46.1616 22.6987  c
45.7003 21.8820 45.4697 20.8981 45.4697 19.7470  c
h
46.7138 19.9057 m
46.7138 21.0906 46.8598 22.0576 47.1518 22.8066  c
47.3930 23.4371 47.7527 23.7524 48.2309 23.7524  c
48.4594 23.7524 48.6964 23.6498 48.9418 23.4445  c
49.1873 23.2393 49.3735 22.8955 49.5004 22.4130  c
49.6951 21.6852 49.7924 20.6590 49.7924 19.3344  c
49.7924 18.3527 49.6909 17.5338 49.4877 16.8779  c
49.3354 16.3912 49.1386 16.0463 48.8974 15.8432  c
48.7239 15.7036 48.5144 15.6337 48.2690 15.6337  c
47.9812 15.6337 47.7252 15.7628 47.5009 16.0210  c
47.1962 16.3722 46.9889 16.9244 46.8789 17.6777  c
46.7688 18.4309 46.7138 19.1736 46.7138 19.9057  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
55.0000 346.000 m
53.0000 346.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
55.0000 331.000 m
53.0000 331.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
55.0000 317.000 m
53.0000 317.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
55.0000 288.000 m
53.0000 288.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
55.0000 274.000 m
53.0000 274.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
55.0000 259.000 m
53.0000 259.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
55.0000 245.000 m
53.0000 245.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
55.0000 216.000 m
53.0000 216.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
55.0000 202.000 m
53.0000 202.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
55.0000 187.000 m
53.0000 187.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
55.0000 173.000 m
53.0000 173.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
55.0000 144.000 m
53.0000 144.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
55.0000 129.000 m
53.0000 129.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
55.0000 115.000 m
53.0000 115.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
55.0000 101.000 m
53.0000 101.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
55.0000 72.0000 m
53.0000 72.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
55.0000 57.0000 m
53.0000 57.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
55.0000 43.0000 m
53.0000 43.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
55.0000 28.0000 m
53.0000 28.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
Q
2 J
0 j
Q
Q
cliprestore
0 0 400 400 rc
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
cliprestore
1.00000 w
2 J
0 j
end end restore showpage

%%Trailer
%%EOF
