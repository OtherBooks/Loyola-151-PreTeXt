%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 20 118 575 673
%%Creator: FreeHEP Graphics2D Driver
%%Producer: com.maplesoft.mathdoc.view.plot.paint.PlotPSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: Friday, March 3, 2017 10:43:10 AM EST
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Draw a line. (x0 y0 x1 y1 line)
/L {bias n m l S unbias} def

% Polyline primitive.
/polyline  {n m 1 exch 1 exch
           {pop currentfile token pop currentfile token pop l} for
           } def

% Draw a polyline (n x0 y0 OPL x1 y1 x2 y2 ... ... xn yn)
/OPL {bias polyline S unbias} def

% Draw a closed polyline (n x0 y0 CPL x1 y1 x2 y2 ... ... xn yn)
/CPL {bias polyline s unbias} def

% Draw a filled polyline (n x0 y0 FPL x1 y1 x2 y2 ... ... xn yn)
/FPL {polyline h f*} def

% Draw an oval. (x y w h OVL)
/OVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width currentlinewidth sub 2 div
      height currentlinewidth sub 2 div neg
      scale n 0 0 1 5 -2 roll arc
      smatrix setmatrix S} def

% Draw a filled oval. (x y w h FOVL)
/FOVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width 2 div
      height 2 div neg
      scale n 0 0 m 0 0 1 5 -2 roll arc
      h smatrix setmatrix f} def

% Draw a rounded rectangle. (x y w h arcwidth archeight RREC)
/RREC {matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      s} def

% Draw a filled rounded rectangle. (x y w h arcwidth archeight FRREC)
/FRREC{matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      h f} def

% Draw a string.  (string x y STR)
/STR {q m 1 -1 scale recshow Q} def

% Define basic plot symbols.
/xys   {/siz exch def /yv exch def /xv exch def} def
/hline {xys n xv siz 2. div sub yv m siz 0 rlineto S} def
/vline {xys n xv yv siz 2. div sub m 0 siz rlineto S} def
/plus  {xys n xv yv siz 2. div sub m 0 siz rlineto
                    xv siz 2. div sub yv m siz 0 rlineto S} def
/dot   {n 2. div 0 360 arc s} def
/fdot  {n 2. div 0 360 arc h f} def
/box   {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                    siz 2 sqrt div dup rs} def
/fbox  {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                       siz 2 sqrt div dup rf} def
/tridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto s} def
/ftridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto h f} def

% Symbols defined in terms of the others.
/star     {3 copy cross plus} def
/cross    {xys q xv yv translate 45 rotate 0 0 siz plus Q} def
/diamond  {xys q xv yv translate 45 rotate 0 0 siz box Q} def
/fdiamond {xys q xv yv translate 45 rotate 0 0 siz fbox Q} def
/triup    {xys q xv yv translate 180 rotate 0 0 siz tridn Q} def
/ftriup   {xys q xv yv translate 180 rotate 0 0 siz ftridn Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Helvetica 16#00 vg&newcompositefont
/DialogInput-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
595 791 setpagesize
20 20 20 20 setmargins
0 0 setorigin
400 400 setsize
fittopage
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0 0 0 RG
[ 1.00000 0 0 1.00000 0 0 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0 0 m
400.000 0 l
400.000 400.000 l
0 400.000 l
0 0 l
h
f
0 0 0 RG
2.00000 w
0 J
1 j
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
0 0 400 400 rc
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
cliprestore
q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 0 390 390 rc
1.00000 w
2 J
0 j
0 J
1 j
q
Q
2 J
0 j
0 J
1 j
q
Q
2 J
0 j
2.00000 w
0 J
1 j
q
q
1.00000 0 0 RG
7.50000 2.59066E-3 380.993 388.997 rc
newpath
9.50000 387.000 m
11.4768 383.360 l
13.1968 380.248 l
15.1312 376.810 l
17.0783 373.412 l
19.0162 370.094 l
20.8129 367.073 l
22.6733 364.001 l
24.5973 360.883 l
26.5151 357.833 l
28.4879 354.757 l
30.2254 352.098 l
32.1815 349.161 l
34.1457 346.270 l
36.0385 343.538 l
37.7573 341.104 l
39.8012 338.266 l
41.5326 335.909 l
43.5467 333.221 l
45.3295 330.889 l
47.2855 328.382 l
49.1481 326.043 l
51.0915 323.652 l
52.8761 321.501 l
54.8011 319.228 l
56.8007 316.917 l
58.5412 314.947 l
60.4211 312.862 l
62.3632 310.754 l
64.2632 308.736 l
66.1015 306.825 l
68.1427 304.749 l
69.9767 302.924 l
71.9350 301.019 l
73.7094 299.329 l
75.6494 297.521 l
77.4747 295.857 l
79.3827 294.156 l
81.2482 292.529 l
83.2011 290.864 l
85.0820 289.296 l
87.0055 287.729 l
88.9131 286.210 l
90.6660 284.844 l
92.6749 283.313 l
94.4718 281.975 l
96.3876 280.580 l
98.2213 279.275 l
100.257 277.858 l
102.020 276.659 l
104.021 275.329 l
105.845 274.144 l
107.840 272.877 l
109.561 271.807 l
111.522 270.615 l
113.415 269.490 l
115.308 268.390 l
117.193 267.318 l
119.004 266.309 l
120.962 265.243 l
122.829 264.248 l
124.793 263.223 l
126.571 262.314 l
128.536 261.329 l
130.418 260.406 l
132.295 259.502 l
134.256 258.577 l
136.062 257.741 l
137.912 256.900 l
139.955 255.988 l
141.804 255.178 l
143.695 254.362 l
145.618 253.547 l
147.386 252.809 l
149.271 252.034 l
151.141 251.275 l
153.141 250.475 l
154.907 249.778 l
156.944 248.984 l
158.782 248.275 l
160.600 247.581 l
162.556 246.841 l
164.520 246.106 l
166.306 245.441 l
168.204 244.740 l
170.055 244.060 l
172.062 243.326 l
173.799 242.693 l
175.794 241.968 l
177.669 241.288 l
179.526 240.614 l
181.384 239.940 l
183.280 239.251 l
185.289 238.519 l
187.131 237.846 l
188.950 237.177 l
190.894 236.459 l
192.833 235.738 l
194.574 235.085 l
196.637 234.305 l
198.362 233.646 l
200.381 232.868 l
202.307 232.116 l
204.027 231.436 l
205.962 230.662 l
207.909 229.872 l
209.847 229.074 l
211.643 228.323 l
213.504 227.532 l
215.428 226.702 l
217.346 225.859 l
219.318 224.976 l
221.056 224.184 l
223.012 223.276 l
224.976 222.345 l
226.869 221.430 l
228.588 220.583 l
230.632 219.555 l
232.363 218.666 l
234.377 217.609 l
236.160 216.653 l
238.116 215.582 l
239.979 214.539 l
241.922 213.425 l
243.707 212.380 l
245.632 211.228 l
247.631 210.002 l
249.372 208.910 l
251.252 207.704 l
253.194 206.430 l
255.094 205.153 l
256.932 203.889 l
258.973 202.451 l
260.807 201.129 l
262.765 199.683 l
264.540 198.342 l
266.480 196.842 l
268.305 195.398 l
270.213 193.854 l
272.079 192.308 l
274.032 190.652 l
275.912 189.019 l
277.836 187.309 l
279.744 185.574 l
281.496 183.944 l
283.505 182.033 l
285.302 180.284 l
287.218 178.378 l
289.052 176.512 l
291.088 174.392 l
292.851 172.515 l
294.852 170.336 l
296.676 168.306 l
298.671 166.035 l
300.392 164.033 l
302.352 161.704 l
304.246 159.405 l
306.138 157.057 l
308.024 154.667 l
309.835 152.323 l
311.793 149.735 l
313.659 147.215 l
315.623 144.507 l
317.401 142.004 l
319.366 139.181 l
321.248 136.421 l
323.126 133.611 l
325.087 130.614 l
326.893 127.799 l
328.743 124.859 l
330.785 121.547 l
332.635 118.486 l
334.526 115.294 l
336.449 111.985 l
338.217 108.884 l
340.102 105.517 l
341.972 102.112 l
343.972 98.3992 l
345.738 95.0600 l
347.774 91.1341 l
349.613 87.5233 l
351.431 83.8862 l
353.387 79.9028 l
355.351 75.8272 l
357.137 72.0518 l
359.034 67.9717 l
360.886 63.9188 l
362.893 59.4451 l
364.630 55.5060 l
366.624 50.9028 l
368.499 46.4979 l
370.356 42.0604 l
372.215 37.5438 l
374.110 32.8584 l
376.120 27.8043 l
377.962 23.0899 l
379.780 18.3601 l
381.724 13.2197 l
383.664 8.00262 l
385.493 3.00259 l
S
cliprestore
newpath
0 0 m
0 390.000 l
390.000 390.000 l
390.000 0 l
h
W
Q
q
0 0 1.00000 RG
7.50000 2.59066E-3 380.993 388.997 rc
newpath
9.50000 305.747 m
11.4768 304.993 l
13.1968 304.336 l
15.1312 303.598 l
17.0783 302.854 l
19.0162 302.115 l
20.8129 301.429 l
22.6733 300.718 l
24.5973 299.984 l
26.5151 299.252 l
28.4879 298.499 l
30.2254 297.835 l
32.1815 297.089 l
34.1457 296.339 l
36.0385 295.616 l
37.7573 294.960 l
39.8012 294.180 l
41.5326 293.519 l
43.5467 292.750 l
45.3295 292.069 l
47.2855 291.322 l
49.1481 290.611 l
51.0915 289.869 l
52.8761 289.188 l
54.8011 288.453 l
56.8007 287.690 l
58.5412 287.025 l
60.4211 286.308 l
62.3632 285.566 l
64.2632 284.841 l
66.1015 284.139 l
68.1427 283.360 l
69.9767 282.660 l
71.9350 281.912 l
73.7094 281.235 l
75.6494 280.494 l
77.4747 279.797 l
79.3827 279.069 l
81.2482 278.357 l
83.2011 277.611 l
85.0820 276.893 l
87.0055 276.159 l
88.9131 275.431 l
90.6660 274.761 l
92.6749 273.994 l
94.4718 273.309 l
96.3876 272.577 l
98.2213 271.877 l
100.257 271.100 l
102.020 270.427 l
104.021 269.663 l
105.845 268.967 l
107.840 268.205 l
109.561 267.548 l
111.522 266.799 l
113.415 266.077 l
115.308 265.354 l
117.193 264.634 l
119.004 263.943 l
120.962 263.195 l
122.829 262.483 l
124.793 261.733 l
126.571 261.054 l
128.536 260.304 l
130.418 259.586 l
132.295 258.869 l
134.256 258.120 l
136.062 257.431 l
137.912 256.724 l
139.955 255.945 l
141.804 255.239 l
143.695 254.517 l
145.618 253.783 l
147.386 253.108 l
149.271 252.388 l
151.141 251.674 l
153.141 250.911 l
154.907 250.237 l
156.944 249.459 l
158.782 248.757 l
160.600 248.063 l
162.556 247.316 l
164.520 246.567 l
166.306 245.885 l
168.204 245.160 l
170.055 244.454 l
172.062 243.687 l
173.799 243.024 l
175.794 242.263 l
177.669 241.547 l
179.526 240.838 l
181.384 240.129 l
183.280 239.405 l
185.289 238.638 l
187.131 237.935 l
188.950 237.240 l
190.894 236.498 l
192.833 235.758 l
194.574 235.093 l
196.637 234.306 l
198.362 233.647 l
200.381 232.876 l
202.307 232.141 l
204.027 231.484 l
205.962 230.746 l
207.909 230.003 l
209.847 229.263 l
211.643 228.577 l
213.504 227.867 l
215.428 227.132 l
217.346 226.400 l
219.318 225.647 l
221.056 224.983 l
223.012 224.237 l
224.976 223.487 l
226.869 222.764 l
228.588 222.108 l
230.632 221.328 l
232.363 220.667 l
234.377 219.898 l
236.160 219.217 l
238.116 218.471 l
239.979 217.760 l
241.922 217.018 l
243.707 216.336 l
245.632 215.601 l
247.631 214.838 l
249.372 214.174 l
251.252 213.456 l
253.194 212.715 l
255.094 211.989 l
256.932 211.287 l
258.973 210.508 l
260.807 209.808 l
262.765 209.060 l
264.540 208.383 l
266.480 207.642 l
268.305 206.946 l
270.213 206.217 l
272.079 205.505 l
274.032 204.759 l
275.912 204.041 l
277.836 203.307 l
279.744 202.579 l
281.496 201.910 l
283.505 201.143 l
285.302 200.457 l
287.218 199.725 l
289.052 199.025 l
291.088 198.248 l
292.851 197.575 l
294.852 196.811 l
296.676 196.115 l
298.671 195.353 l
300.392 194.696 l
302.352 193.948 l
304.246 193.225 l
306.138 192.502 l
308.024 191.783 l
309.835 191.091 l
311.793 190.344 l
313.659 189.631 l
315.623 188.881 l
317.401 188.203 l
319.366 187.452 l
321.248 186.734 l
323.126 186.017 l
325.087 185.268 l
326.893 184.579 l
328.743 183.873 l
330.785 183.093 l
332.635 182.387 l
334.526 181.665 l
336.449 180.931 l
338.217 180.256 l
340.102 179.536 l
341.972 178.823 l
343.972 178.059 l
345.738 177.385 l
347.774 176.607 l
349.613 175.906 l
351.431 175.211 l
353.387 174.465 l
355.351 173.715 l
357.137 173.033 l
359.034 172.309 l
360.886 171.602 l
362.893 170.836 l
364.630 170.173 l
366.624 169.411 l
368.499 168.695 l
370.356 167.986 l
372.215 167.277 l
374.110 166.553 l
376.120 165.786 l
377.962 165.083 l
379.780 164.389 l
381.724 163.647 l
383.664 162.906 l
385.493 162.208 l
S
cliprestore
newpath
0 0 m
0 390.000 l
390.000 390.000 l
390.000 0 l
h
W
Q
Q
q
1.00000 w
2 J
0 j
q
0 J
1 j
newpath
9.50000 306.000 m
385.493 306.000 l
S
Q
0 J
1 j
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
287 329 8 15 rc
Q
cliprestore
newpath
0 0 m
0 390.000 l
390.000 390.000 l
390.000 0 l
h
W
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0 0 1.00000 0 0 ] concat
q
q
0 w
1.00000 w
2 J
0 j
newpath
10.0000 306.000 m
10.0000 310.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
q
6 317 8 16 rc
newpath
18.4531 325.890 m
8.54687 325.890 l
8.54687 325.109 l
18.4531 325.109 l
18.4531 325.890 l
h
f
Q
newpath
17.7578 321.042 m
20.1748 319.863 l
20.4165 319.863 l
20.4165 328.249 l
20.4165 328.806 20.4397 329.152 20.4860 329.289  c
20.5324 329.426 20.6289 329.531 20.7753 329.604  c
20.9218 329.677 21.2197 329.719 21.6689 329.729  c
21.6689 330.000 l
17.9335 330.000 l
17.9335 329.729 l
18.4023 329.719 18.7050 329.679 18.8418 329.608  c
18.9785 329.537 19.0737 329.442 19.1274 329.322  c
19.1811 329.202 19.2080 328.845 19.2080 328.249  c
19.2080 322.888 l
19.2080 322.165 19.1835 321.701 19.1347 321.496  c
19.1005 321.340 19.0383 321.225 18.9480 321.152  c
18.8576 321.079 18.7490 321.042 18.6220 321.042  c
18.4414 321.042 18.1899 321.118 17.8676 321.269  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
103.000 306.000 m
103.000 310.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
q
94 317 8 16 rc
newpath
106.453 325.890 m
96.5468 325.890 l
96.5468 325.109 l
106.453 325.109 l
106.453 325.890 l
h
f
Q
newpath
104.542 325.092 m
104.542 323.960 104.712 322.984 105.054 322.166  c
105.396 321.348 105.850 320.739 106.417 320.339  c
106.856 320.022 107.310 319.863 107.779 319.863  c
108.541 319.863 109.224 320.251 109.830 321.027  c
110.586 321.989 110.965 323.293 110.965 324.939  c
110.965 326.091 110.799 327.070 110.467 327.876  c
110.135 328.681 109.711 329.266 109.196 329.630  c
108.681 329.993 108.184 330.175 107.706 330.175  c
106.758 330.175 105.970 329.616 105.340 328.498  c
104.808 327.556 104.542 326.420 104.542 325.092  c
h
105.977 325.275 m
105.977 326.643 106.146 327.758 106.482 328.623  c
106.761 329.350 107.176 329.714 107.728 329.714  c
107.991 329.714 108.265 329.595 108.548 329.359  c
108.831 329.122 109.046 328.725 109.192 328.168  c
109.417 327.329 109.529 326.145 109.529 324.616  c
109.529 323.483 109.412 322.539 109.178 321.782  c
109.002 321.220 108.775 320.822 108.497 320.588  c
108.296 320.427 108.055 320.346 107.772 320.346  c
107.439 320.346 107.144 320.495 106.885 320.793  c
106.534 321.198 106.294 321.835 106.168 322.705  c
106.041 323.574 105.977 324.431 105.977 325.275  c
h
113.375 328.579 m
113.604 328.579 113.797 328.658 113.953 328.817  c
114.109 328.975 114.188 329.167 114.188 329.392  c
114.188 329.616 114.108 329.808 113.950 329.967  c
113.791 330.125 113.599 330.205 113.375 330.205  c
113.150 330.205 112.958 330.125 112.800 329.967  c
112.641 329.808 112.562 329.616 112.562 329.392  c
112.562 329.162 112.641 328.969 112.800 328.813  c
112.958 328.657 113.150 328.579 113.375 328.579  c
h
121.761 320.068 m
121.189 321.313 l
118.201 321.313 l
117.549 322.646 l
118.843 322.836 119.869 323.317 120.626 324.089  c
121.275 324.753 121.600 325.534 121.600 326.433  c
121.600 326.955 121.493 327.439 121.281 327.883  c
121.069 328.327 120.801 328.706 120.479 329.018  c
120.157 329.331 119.798 329.582 119.402 329.772  c
118.841 330.041 118.265 330.175 117.674 330.175  c
117.078 330.175 116.645 330.074 116.374 329.871  c
116.103 329.669 115.967 329.445 115.967 329.201  c
115.967 329.064 116.023 328.944 116.136 328.839  c
116.248 328.734 116.390 328.681 116.561 328.681  c
116.688 328.681 116.799 328.701 116.894 328.740  c
116.989 328.779 117.151 328.879 117.381 329.040  c
117.747 329.294 118.118 329.421 118.494 329.421  c
119.065 329.421 119.567 329.205 119.999 328.773  c
120.431 328.341 120.647 327.814 120.647 327.194  c
120.647 326.594 120.455 326.033 120.069 325.513  c
119.683 324.993 119.151 324.592 118.472 324.309  c
117.940 324.089 117.215 323.962 116.297 323.928  c
118.201 320.068 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
197.000 306.000 m
197.000 310.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
193.542 323.092 m
193.542 321.960 193.712 320.984 194.054 320.166  c
194.396 319.348 194.850 318.739 195.417 318.339  c
195.856 318.022 196.310 317.863 196.779 317.863  c
197.541 317.863 198.224 318.251 198.830 319.027  c
199.586 319.989 199.965 321.293 199.965 322.939  c
199.965 324.091 199.799 325.070 199.467 325.876  c
199.135 326.681 198.711 327.266 198.196 327.630  c
197.681 327.993 197.184 328.175 196.706 328.175  c
195.758 328.175 194.970 327.616 194.340 326.498  c
193.808 325.556 193.542 324.420 193.542 323.092  c
h
194.977 323.275 m
194.977 324.643 195.146 325.758 195.482 326.623  c
195.761 327.350 196.176 327.714 196.728 327.714  c
196.991 327.714 197.265 327.595 197.548 327.359  c
197.831 327.122 198.046 326.725 198.192 326.168  c
198.417 325.329 198.529 324.145 198.529 322.616  c
198.529 321.483 198.412 320.539 198.178 319.782  c
198.002 319.220 197.775 318.822 197.497 318.588  c
197.296 318.427 197.055 318.346 196.772 318.346  c
196.439 318.346 196.144 318.495 195.885 318.793  c
195.534 319.198 195.294 319.835 195.168 320.705  c
195.041 321.574 194.977 322.431 194.977 323.275  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
291.000 306.000 m
291.000 310.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
287.542 325.092 m
287.542 323.960 287.712 322.984 288.054 322.166  c
288.396 321.348 288.850 320.739 289.417 320.339  c
289.856 320.022 290.310 319.863 290.779 319.863  c
291.541 319.863 292.224 320.251 292.830 321.027  c
293.586 321.989 293.965 323.293 293.965 324.939  c
293.965 326.091 293.799 327.070 293.467 327.876  c
293.135 328.681 292.711 329.266 292.196 329.630  c
291.681 329.993 291.184 330.175 290.706 330.175  c
289.758 330.175 288.970 329.616 288.340 328.498  c
287.808 327.556 287.542 326.420 287.542 325.092  c
h
288.977 325.275 m
288.977 326.643 289.146 327.758 289.482 328.623  c
289.761 329.350 290.176 329.714 290.728 329.714  c
290.991 329.714 291.265 329.595 291.548 329.359  c
291.831 329.122 292.046 328.725 292.192 328.168  c
292.417 327.329 292.529 326.145 292.529 324.616  c
292.529 323.483 292.412 322.539 292.178 321.782  c
292.002 321.220 291.775 320.822 291.497 320.588  c
291.296 320.427 291.055 320.346 290.772 320.346  c
290.439 320.346 290.144 320.495 289.885 320.793  c
289.534 321.198 289.294 321.835 289.168 322.705  c
289.041 323.574 288.977 324.431 288.977 325.275  c
h
296.375 328.579 m
296.604 328.579 296.797 328.658 296.953 328.817  c
297.109 328.975 297.188 329.167 297.188 329.392  c
297.188 329.616 297.108 329.808 296.950 329.967  c
296.791 330.125 296.599 330.205 296.375 330.205  c
296.150 330.205 295.958 330.125 295.800 329.967  c
295.641 329.808 295.562 329.616 295.562 329.392  c
295.562 329.162 295.641 328.969 295.800 328.813  c
295.958 328.657 296.150 328.579 296.375 328.579  c
h
304.761 320.068 m
304.189 321.313 l
301.201 321.313 l
300.549 322.646 l
301.843 322.836 302.869 323.317 303.626 324.089  c
304.275 324.753 304.600 325.534 304.600 326.433  c
304.600 326.955 304.493 327.439 304.281 327.883  c
304.069 328.327 303.801 328.706 303.479 329.018  c
303.157 329.331 302.798 329.582 302.402 329.772  c
301.841 330.041 301.265 330.175 300.674 330.175  c
300.078 330.175 299.645 330.074 299.374 329.871  c
299.103 329.669 298.967 329.445 298.967 329.201  c
298.967 329.064 299.023 328.944 299.136 328.839  c
299.248 328.734 299.390 328.681 299.561 328.681  c
299.688 328.681 299.799 328.701 299.894 328.740  c
299.989 328.779 300.151 328.879 300.381 329.040  c
300.747 329.294 301.118 329.421 301.494 329.421  c
302.065 329.421 302.567 329.205 302.999 328.773  c
303.431 328.341 303.647 327.814 303.647 327.194  c
303.647 326.594 303.455 326.033 303.069 325.513  c
302.683 324.993 302.151 324.592 301.472 324.309  c
300.940 324.089 300.215 323.962 299.297 323.928  c
301.201 320.068 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
385.000 306.000 m
385.000 310.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
388.757 321.042 m
391.174 319.863 l
391.416 319.863 l
391.416 328.249 l
391.416 328.806 391.439 329.152 391.486 329.289  c
391.532 329.426 391.628 329.531 391.775 329.604  c
391.921 329.677 392.219 329.719 392.668 329.729  c
392.668 330.000 l
388.933 330.000 l
388.933 329.729 l
389.402 329.719 389.705 329.679 389.841 329.608  c
389.978 329.537 390.073 329.442 390.127 329.322  c
390.181 329.202 390.208 328.845 390.208 328.249  c
390.208 322.888 l
390.208 322.165 390.183 321.701 390.134 321.496  c
390.100 321.340 390.038 321.225 389.948 321.152  c
389.857 321.079 389.749 321.042 389.622 321.042  c
389.441 321.042 389.189 321.118 388.867 321.269  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
28.0000 306.000 m
28.0000 308.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
47.0000 306.000 m
47.0000 308.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
66.0000 306.000 m
66.0000 308.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
85.0000 306.000 m
85.0000 308.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
122.000 306.000 m
122.000 308.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
141.000 306.000 m
141.000 308.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
160.000 306.000 m
160.000 308.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
179.000 306.000 m
179.000 308.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
216.000 306.000 m
216.000 308.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
235.000 306.000 m
235.000 308.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
254.000 306.000 m
254.000 308.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
273.000 306.000 m
273.000 308.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
310.000 306.000 m
310.000 308.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
329.000 306.000 m
329.000 308.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
348.000 306.000 m
348.000 308.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
367.000 306.000 m
367.000 308.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
Q
2 J
0 j
q
0 J
1 j
newpath
197.000 387.000 m
197.000 3.00259 l
S
Q
0 J
1 j
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
161 147 8 15 rc
Q
cliprestore
newpath
0 0 m
0 390.000 l
390.000 390.000 l
390.000 0 l
h
W
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0 0 1.00000 0 0 ] concat
q
q
0 w
1.00000 w
2 J
0 j
newpath
197.000 378.000 m
193.000 378.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
q
178 375 8 16 rc
newpath
190.453 383.890 m
180.546 383.890 l
180.546 383.109 l
190.453 383.109 l
190.453 383.890 l
h
f
Q
newpath
194.877 386.088 m
194.181 388.000 l
188.322 388.000 l
188.322 387.729 l
190.045 386.156 191.259 384.872 191.962 383.876  c
192.665 382.880 193.017 381.969 193.017 381.144  c
193.017 380.514 192.824 379.997 192.438 379.591  c
192.052 379.186 191.591 378.983 191.054 378.983  c
190.565 378.983 190.127 379.126 189.739 379.412  c
189.351 379.698 189.064 380.116 188.878 380.668  c
188.607 380.668 l
188.730 379.765 189.043 379.071 189.549 378.588  c
190.054 378.105 190.685 377.863 191.442 377.863  c
192.248 377.863 192.920 378.122 193.460 378.639  c
193.999 379.157 194.269 379.767 194.269 380.470  c
194.269 380.973 194.152 381.476 193.918 381.979  c
193.556 382.770 192.970 383.607 192.160 384.491  c
190.944 385.819 190.185 386.620 189.882 386.894  c
192.475 386.894 l
193.002 386.894 193.372 386.874 193.584 386.835  c
193.797 386.796 193.988 386.717 194.159 386.597  c
194.330 386.477 194.479 386.308 194.606 386.088  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
197.000 306.000 m
193.000 306.000 l
S
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
197.000 234.000 m
193.000 234.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
194.877 242.088 m
194.181 244.000 l
188.322 244.000 l
188.322 243.729 l
190.045 242.156 191.259 240.872 191.962 239.876  c
192.665 238.880 193.017 237.969 193.017 237.144  c
193.017 236.514 192.824 235.997 192.438 235.591  c
192.052 235.186 191.591 234.983 191.054 234.983  c
190.565 234.983 190.127 235.126 189.739 235.412  c
189.351 235.698 189.064 236.116 188.878 236.668  c
188.607 236.668 l
188.730 235.765 189.043 235.071 189.549 234.588  c
190.054 234.105 190.685 233.863 191.442 233.863  c
192.248 233.863 192.920 234.122 193.460 234.639  c
193.999 235.157 194.269 235.767 194.269 236.470  c
194.269 236.973 194.152 237.476 193.918 237.979  c
193.556 238.770 192.970 239.607 192.160 240.491  c
190.944 241.819 190.185 242.620 189.882 242.894  c
192.475 242.894 l
193.002 242.894 193.372 242.874 193.584 242.835  c
193.797 242.796 193.988 242.717 194.159 242.597  c
194.330 242.477 194.479 242.308 194.606 242.088  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
197.000 162.000 m
193.000 162.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
194.980 169.337 m
194.980 170.377 l
193.647 170.377 l
193.647 173.000 l
192.438 173.000 l
192.438 170.377 l
188.234 170.377 l
188.234 169.440 l
192.841 162.863 l
193.647 162.863 l
193.647 169.337 l
h
192.438 169.337 m
192.438 164.408 l
188.952 169.337 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
197.000 90.0000 m
193.000 90.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
194.723 90.8632 m
194.723 91.1342 l
194.079 91.1977 193.553 91.3259 193.145 91.5188  c
192.737 91.7116 192.334 92.0058 191.936 92.4013  c
191.538 92.7968 191.209 93.2375 190.948 93.7233  c
190.686 94.2092 190.468 94.7866 190.292 95.4555  c
190.995 94.9721 191.701 94.7304 192.409 94.7304  c
193.087 94.7304 193.676 95.0039 194.174 95.5507  c
194.672 96.0976 194.921 96.8007 194.921 97.6601  c
194.921 98.4902 194.669 99.2470 194.167 99.9306  c
193.561 100.760 192.760 101.175 191.764 101.175  c
191.085 101.175 190.509 100.951 190.036 100.502  c
189.108 99.6279 188.644 98.4951 188.644 97.1035  c
188.644 96.2148 188.822 95.3701 189.179 94.5693  c
189.535 93.7685 190.044 93.0581 190.706 92.4379  c
191.367 91.8178 192.001 91.4003 192.606 91.1855  c
193.212 90.9707 193.776 90.8632 194.298 90.8632  c
h
190.168 95.9902 m
190.080 96.6494 190.036 97.1816 190.036 97.5869  c
190.036 98.0556 190.122 98.5647 190.296 99.1140  c
190.469 99.6633 190.727 100.099 191.068 100.421  c
191.317 100.650 191.620 100.765 191.977 100.765  c
192.401 100.765 192.781 100.565 193.116 100.165  c
193.450 99.7646 193.617 99.1933 193.617 98.4511  c
193.617 97.6162 193.451 96.8935 193.119 96.2832  c
192.787 95.6728 192.316 95.3676 191.706 95.3676  c
191.520 95.3676 191.321 95.4067 191.109 95.4848  c
190.896 95.5629 190.583 95.7314 190.168 95.9902  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
197.000 19.0000 m
193.000 19.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
190.878 23.9975 m
190.092 23.3530 189.585 22.8354 189.358 22.4448  c
189.131 22.0542 189.018 21.6489 189.018 21.2290  c
189.018 20.5844 189.267 20.0290 189.765 19.5627  c
190.263 19.0964 190.924 18.8632 191.750 18.8632  c
192.550 18.8632 193.195 19.0805 193.683 19.5151  c
194.171 19.9497 194.416 20.4453 194.416 21.0019  c
194.416 21.3730 194.284 21.7514 194.020 22.1372  c
193.756 22.5229 193.207 22.9770 192.372 23.4995  c
193.231 24.1635 193.800 24.6860 194.079 25.0668  c
194.450 25.5649 194.635 26.0898 194.635 26.6416  c
194.635 27.3398 194.369 27.9367 193.837 28.4323  c
193.305 28.9279 192.606 29.1757 191.742 29.1757  c
190.800 29.1757 190.065 28.8803 189.538 28.2895  c
189.118 27.8159 188.908 27.2983 188.908 26.7368  c
188.908 26.2973 189.055 25.8615 189.351 25.4294  c
189.646 24.9973 190.155 24.5200 190.878 23.9975  c
h
192.028 23.2138 m
192.614 22.6865 192.985 22.2702 193.141 21.9650  c
193.297 21.6599 193.376 21.3144 193.376 20.9287  c
193.376 20.4160 193.231 20.0144 192.943 19.7238  c
192.655 19.4333 192.262 19.2880 191.764 19.2880  c
191.266 19.2880 190.861 19.4321 190.548 19.7202  c
190.236 20.0083 190.080 20.3452 190.080 20.7309  c
190.080 20.9848 190.144 21.2387 190.274 21.4926  c
190.403 21.7465 190.587 21.9882 190.827 22.2177  c
h
191.222 24.2758 m
190.817 24.6176 190.517 24.9899 190.321 25.3928  c
190.126 25.7956 190.028 26.2314 190.028 26.7002  c
190.028 27.3300 190.200 27.8342 190.545 28.2126  c
190.889 28.5910 191.327 28.7802 191.859 28.7802  c
192.387 28.7802 192.809 28.6313 193.127 28.3335  c
193.444 28.0356 193.603 27.6743 193.603 27.2495  c
193.603 26.8979 193.510 26.5830 193.324 26.3046  c
192.978 25.7871 192.277 25.1108 191.222 24.2758  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
197.000 342.000 m
195.000 342.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
197.000 270.000 m
195.000 270.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
197.000 198.000 m
195.000 198.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
197.000 126.000 m
195.000 126.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
197.000 55.0000 m
195.000 55.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
Q
2 J
0 j
Q
Q
cliprestore
0 0 400 400 rc
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
cliprestore
1.00000 w
2 J
0 j
end end restore showpage

%%Trailer
%%EOF
